require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const path = require('path');
const fs = require('fs');

// Import routes and services
const journalRoutes = require('./routes/journal');
const botRoutes = require('./routes/bot');
const healthRoutes = require('./routes/health');
const webhookRoutes = require('./routes/webhook');
const { initDatabase } = require('./database/init');
const { processVoiceMessage } = require('./services/voiceProcessor');

const app = express();
const PORT = process.env.PORT || 3001;

// Create necessary directories
const dirs = ['./data', './uploads', './uploads/images'];
dirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// Initialize Telegram Bot
const isProduction = process.env.NODE_ENV === 'production';
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
  polling: !isProduction // Use polling only in development
});

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});

// Middleware
app.use(helmet());
app.use(cors());
app.use(limiter);
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// Initialize database
initDatabase().catch(err => {
  console.error('‚ùå Database initialization failed:', err);
  process.exit(1);
});

// Make bot available to webhook routes
app.locals.bot = bot;

// Root health check endpoint
app.get('/', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    message: 'Therapy Journal API is running',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// Routes
app.use('/api', healthRoutes);
app.use('/api/journal', journalRoutes);
app.use('/api/bot', botRoutes);
app.use('/webhook', webhookRoutes); // Move webhook to /webhook path

// Serve static files from React build
app.use(express.static(path.join(__dirname, '../client/build')));

// Telegram Bot Message Handler
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    if (msg.voice) {
      // Handle voice message
      await processVoiceMessage(bot, msg);
    } else if (msg.text === '/start') {
      // Welcome message
      const welcomeText = `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞. 

üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –∫—Ä–∞—Ç–∫–∏–º —Ä–µ–∑—é–º–µ.

üì± –ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:
${process.env.MINI_APP_URL || 'https://your-domain.com'}

üí° –í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –¥–æ–ø–æ–ª–Ω—è—Ç—å –∑–∞–ø–∏—Å–∏
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`;

      await bot.sendMessage(chatId, welcomeText);
    } else {
      await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.');
    }
  } catch (error) {
    console.error('Bot message handler error:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('‚ùå Server error:', err.stack);
  res.status(500).json({ error: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!' });
});

// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

// Catch all handler for React app
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../client/build/index.html'));
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${process.env.MINI_APP_URL || 'http://localhost:3000'}`);
  console.log(`üîó Health check: http://localhost:${PORT}/`);
  console.log(`üîó API health: http://localhost:${PORT}/api/health`);
  
  // Set webhook in production
  if (isProduction && process.env.WEBHOOK_URL) {
    bot.setWebHook(`${process.env.WEBHOOK_URL}/webhook`).then(() => {
      console.log('‚úÖ Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }).catch(err => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err);
    });
  }
});

module.exports = { app, bot };
