const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const OpenAI = require('openai');
const moment = require('moment-timezone');
const { runQuery, getQuery } = require('../database/init');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

async function processVoiceMessage(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const voiceFileId = msg.voice.file_id;
  
  try {
    // Send processing message
    const processingMsg = await bot.sendMessage(chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    
    // Download voice file
    const file = await bot.getFile(voiceFileId);
    const fileName = `${uuidv4()}.ogg`;
    const filePath = path.join(__dirname, '../../uploads', fileName);
    
    // Download file
    const fileStream = fs.createWriteStream(filePath);
    const response = await fetch(file.file_path);
    response.body.pipe(fileStream);
    
    await new Promise((resolve, reject) => {
      fileStream.on('finish', resolve);
      fileStream.on('error', reject);
    });
    
    // Update status
    await bot.editMessageText('üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ...', {
      chat_id: chatId,
      message_id: processingMsg.message_id
    });
    
    // Transcribe with Whisper
    const transcript = await transcribeAudio(filePath);
    
    // Update status
    await bot.editMessageText('ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ —Å–æ–∑–¥–∞—é —Ä–µ–∑—é–º–µ...', {
      chat_id: chatId,
      message_id: processingMsg.message_id
    });
    
    // Generate summary with LLM
    const summaryData = await generateSummary(transcript);
    
    // Create journal entry
    const entryId = await createJournalEntry(userId, transcript, summaryData);
    
    // Clean up audio file
    fs.unlinkSync(filePath);
    
    // Send success message with deep link
    const miniAppUrl = process.env.MINI_APP_URL || 'http://localhost:3000';
    const deepLink = `${miniAppUrl}/entry/${entryId}`;
    
    const successMessage = `‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!

üìÖ –î–∞—Ç–∞: ${moment().tz('Europe/Lisbon').format('DD.MM.YYYY')}
üìù –†–µ–∑—é–º–µ: ${summaryData.title}

üîó –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–ø–∏—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: ${deepLink}

üí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É, –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.`;
    
    await bot.editMessageText(successMessage, {
      chat_id: chatId,
      message_id: processingMsg.message_id,
      parse_mode: 'HTML'
    });
    
  } catch (error) {
    console.error('Voice processing error:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function transcribeAudio(filePath) {
  try {
    const transcription = await openai.audio.transcriptions.create({
      file: fs.createReadStream(filePath),
      model: "whisper-1",
      language: "auto"
    });
    
    return transcription.text;
  } catch (error) {
    console.error('Transcription error:', error);
    throw new Error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ');
  }
}

async function generateSummary(transcript) {
  try {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: "${transcript}"

–°–æ–∑–¥–∞–π JSON —Å –ø–æ–ª—è–º–∏:
{
  "title": "–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏ (1-2 —Å–ª–æ–≤–∞)",
  "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "key_topics": ["—Å–ø–∏—Å–æ–∫", "–æ—Å–Ω–æ–≤–Ω—ã—Ö", "—Ç–µ–º"],
  "emotions": ["—ç–º–æ—Ü–∏–∏", "–∫–æ—Ç–æ—Ä—ã–µ", "–ø—Ä–æ—è–≤–ª—è–ª–∏—Å—å"],
  "insights": "–í–∞–∂–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏–ª–∏ –≤—ã–≤–æ–¥—ã",
  "next_steps": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"
}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 500
    });

    const response = completion.choices[0].message.content;
    const summaryData = JSON.parse(response);
    
    return summaryData;
  } catch (error) {
    console.error('Summary generation error:', error);
    // Fallback to simple summary
    return {
      title: "–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è",
      summary: transcript.substring(0, 200) + "...",
      key_topics: [],
      emotions: [],
      insights: "",
      next_steps: ""
    };
  }
}

async function createJournalEntry(userId, transcript, summaryData) {
  const date = moment().tz('Europe/Lisbon').format('YYYY-MM-DD');
  const title = summaryData.title || "–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è";
  const summary = summaryData.summary || "";
  const tags = summaryData.key_topics ? summaryData.key_topics.join(', ') : "";
  const rawLlmJson = JSON.stringify(summaryData);
  
  const result = await runQuery(`
    INSERT INTO journal_entries 
    (telegram_user_id, date, title, summary, transcript, tags, raw_llm_json, source)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
  `, [userId, date, title, summary, transcript, tags, rawLlmJson, 'bot_voice']);
  
  return result.id;
}

module.exports = {
  processVoiceMessage,
  transcribeAudio,
  generateSummary
};
