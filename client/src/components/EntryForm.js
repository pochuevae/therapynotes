import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ArrowLeft, Save, Calendar, Tag } from 'lucide-react';
import DatePicker from 'react-datepicker';
import moment from 'moment';
import 'moment/locale/ru';
import 'react-datepicker/dist/react-datepicker.css';
import { useJournal } from '../contexts/JournalContext';
import toast from 'react-hot-toast';

moment.locale('ru');

const EntryForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { createEntry, updateEntry, getEntry } = useJournal();
  
  const [formData, setFormData] = useState({
    date: new Date(),
    title: '',
    summary: '',
    content: '',
    tags: ''
  });
  const [isLoading, setIsLoading] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (id && id !== 'new') {
      loadEntry();
      setIsEditMode(true);
    }
  }, [id]); // eslint-disable-line react-hooks/exhaustive-deps

  const loadEntry = async () => {
    try {
      const data = await getEntry(id);
      if (data && data.entry) {
        setFormData({
          date: new Date(data.entry.date),
          title: data.entry.title || '',
          summary: data.entry.summary || '',
          content: data.entry.content || '',
          tags: data.entry.tags || ''
        });
      }
    } catch (error) {
      console.error('Load entry error:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏');
      navigate('/');
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.title.trim()) {
      newErrors.title = '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }
    
    if (!formData.summary.trim()) {
      newErrors.summary = '–†–µ–∑—é–º–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    
    if (!formData.date) {
      newErrors.date = '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsLoading(true);
    
    try {
      const entryData = {
        date: moment(formData.date).format('YYYY-MM-DD'),
        title: formData.title.trim(),
        summary: formData.summary.trim(),
        content: formData.content.trim(),
        tags: formData.tags.trim()
      };
      
      let success = false;
      
      if (isEditMode) {
        success = await updateEntry(id, entryData);
      } else {
        const newId = await createEntry(entryData);
        success = !!newId;
        if (success) {
          navigate(`/entry/${newId}`);
          return;
        }
      }
      
      if (success) {
        navigate(`/entry/${id}`);
      }
    } catch (error) {
      console.error('Save entry error:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  const handleBlur = () => {
    // Auto-save draft (optional feature)
    // Could implement local storage draft saving here
  };

  return (
    <div className="container">
      {/* Header */}
      <div className="header">
        <button onClick={() => navigate('/')} className="btn btn-secondary">
          <ArrowLeft size={20} />
          –ù–∞–∑–∞–¥
        </button>
        <h1>{isEditMode ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å' : '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å'}</h1>
      </div>

      {/* Form */}
      <form onSubmit={handleSubmit} className="card">
        {/* Date */}
        <div className="form-group">
          <label className="form-label">
            <Calendar size={16} style={{ marginRight: '8px' }} />
            –î–∞—Ç–∞ —Å–µ—Å—Å–∏–∏
          </label>
          <DatePicker
            selected={formData.date}
            onChange={(date) => handleInputChange('date', date)}
            dateFormat="dd.MM.yyyy"
            locale="ru"
            className={`form-input ${errors.date ? 'error' : ''}`}
            placeholderText="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
            maxDate={new Date()}
          />
          {errors.date && <div className="error-message">{errors.date}</div>}
        </div>

        {/* Title */}
        <div className="form-group">
          <label className="form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫ *</label>
          <input
            type="text"
            value={formData.title}
            onChange={(e) => handleInputChange('title', e.target.value)}
            onBlur={handleBlur}
            className={`form-input ${errors.title ? 'error' : ''}`}
            placeholder="–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏"
            maxLength={100}
          />
          {errors.title && <div className="error-message">{errors.title}</div>}
        </div>

        {/* Summary */}
        <div className="form-group">
          <label className="form-label">–†–µ–∑—é–º–µ *</label>
          <textarea
            value={formData.summary}
            onChange={(e) => handleInputChange('summary', e.target.value)}
            onBlur={handleBlur}
            className={`form-textarea ${errors.summary ? 'error' : ''}`}
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ —Å–µ—Å—Å–∏–∏"
            rows={4}
            maxLength={500}
          />
          {errors.summary && <div className="error-message">{errors.summary}</div>}
          <div style={{ fontSize: '12px', color: 'var(--tg-theme-hint-color)', marginTop: '4px' }}>
            {formData.summary.length}/500 —Å–∏–º–≤–æ–ª–æ–≤
          </div>
        </div>

        {/* Tags */}
        <div className="form-group">
          <label className="form-label">
            <Tag size={16} style={{ marginRight: '8px' }} />
            –¢–µ–≥–∏
          </label>
          <input
            type="text"
            value={formData.tags}
            onChange={(e) => handleInputChange('tags', e.target.value)}
            onBlur={handleBlur}
            className="form-input"
            placeholder="–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–∞)"
          />
          <div style={{ fontSize: '12px', color: 'var(--tg-theme-hint-color)', marginTop: '4px' }}>
            –†–∞–∑–¥–µ–ª—è–π—Ç–µ —Ç–µ–≥–∏ –∑–∞–ø—è—Ç—ã–º–∏
          </div>
        </div>

        {/* Content */}
        <div className="form-group">
          <label className="form-label">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏</label>
          <textarea
            value={formData.content}
            onChange={(e) => handleInputChange('content', e.target.value)}
            onBlur={handleBlur}
            className="form-textarea"
            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º—ã—Å–ª–∏, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –ø–ª–∞–Ω—ã..."
            rows={6}
          />
          <div style={{ fontSize: '12px', color: 'var(--tg-theme-hint-color)', marginTop: '4px' }}>
            {formData.content.length} —Å–∏–º–≤–æ–ª–æ–≤
          </div>
        </div>

        {/* Actions */}
        <div className="actions">
          <button
            type="button"
            onClick={() => navigate('/')}
            className="btn btn-secondary"
            disabled={isLoading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="submit"
            className={`btn ${isLoading ? 'btn-loading' : ''}`}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <div className="spinner"></div>
                –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
              </>
            ) : (
              <>
                <Save size={20} />
                {isEditMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å'}
              </>
            )}
          </button>
        </div>
      </form>

      {/* Help Text */}
      <div className="card" style={{ marginTop: '20px', background: 'var(--tg-theme-secondary-bg-color)' }}>
        <h3 style={{ marginBottom: '8px', fontSize: '16px' }}>üí° –°–æ–≤–µ—Ç—ã –ø–æ –≤–µ–¥–µ–Ω–∏—é –¥–Ω–µ–≤–Ω–∏–∫–∞</h3>
        <ul style={{ margin: 0, paddingLeft: '20px', lineHeight: '1.5' }}>
          <li>–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —ç–º–æ—Ü–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π</li>
          <li>–û—Ç–º–µ—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏</li>
          <li>–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –≤–∞–∂–Ω—ã–µ –≤—ã–≤–æ–¥—ã</li>
          <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞</li>
          <li>–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏</li>
        </ul>
      </div>
    </div>
  );
};

export default EntryForm;
